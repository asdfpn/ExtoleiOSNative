// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ExtoleMobileSDK
import AdSupport
import Combine
import CryptoKit
import ExtoleConsumerAPI
import Foundation
import JavaScriptCore
import Logging
import ObjectMapper
import Swift
import SwiftEventBus
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
open class Action : ObjectMapper.StaticMappable, ObjectMapper.Mappable {
  public static var customActionTypes: [Swift.String : ExtoleMobileSDK.Action]
  open func execute(event: ExtoleMobileSDK.AppEvent, extole: ExtoleMobileSDK.ExtoleImpl)
  open func getType() -> ExtoleMobileSDK.ActionType
  public init()
  required public init?(map: ObjectMapper.Map)
  open func mapping(map: ObjectMapper.Map)
  public static func objectForMapping(map: ObjectMapper.Map) -> (any ObjectMapper.BaseMappable)?
  @objc deinit
}
public enum ActionType : Swift.String, Swift.Decodable {
  case NOT_DEFINED
  case VIEW_FULLSCREEN
  case PROMPT
  case SET_LOG_LEVEL
  case FETCH
  case LOAD_OPERATIONS
  case NATIVE_SHARE
  case CUSTOM
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol Campaign : ExtoleMobileSDK.Extole {
  func getProgram() -> Swift.String
  func getId() -> ExtoleMobileSDK.Id<any ExtoleMobileSDK.Campaign>
}
extension ExtoleMobileSDK.Campaign {
  public func webView(headers: [Swift.String : Swift.String] = [:], data: [Swift.String : Swift.String] = [:]) -> any ExtoleMobileSDK.ExtoleWebView
}
open class Condition : ObjectMapper.StaticMappable, ObjectMapper.Mappable {
  public static var customConditionTypes: [Swift.String : ExtoleMobileSDK.Condition]
  open func passes(event: ExtoleMobileSDK.AppEvent, extole: ExtoleMobileSDK.ExtoleImpl) -> Swift.Bool
  open func getType() -> ExtoleMobileSDK.ConditionType
  public init()
  required public init?(map: ObjectMapper.Map)
  open func mapping(map: ObjectMapper.Map)
  public static func objectForMapping(map: ObjectMapper.Map) -> (any ObjectMapper.BaseMappable)?
  @objc deinit
}
public enum ConditionType : Swift.String, Swift.Decodable {
  case NOT_DEFINED
  case EVENT
  case CUSTOM
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class Event {
  @objc deinit
}
public protocol Extole {
  func fetchZone(_ zoneName: Swift.String, _ data: [Swift.String : Swift.String], completion: @escaping (ExtoleMobileSDK.Zone?, (any ExtoleMobileSDK.Campaign)?, (any Swift.Error)?) -> Swift.Void)
  func getServices() -> ExtoleMobileSDK.ExtoleServices
  func sendEvent(_ eventName: Swift.String, _ data: [Swift.String : Any?], _ completion: ((ExtoleMobileSDK.Id<ExtoleMobileSDK.Event>?, (any Swift.Error)?) -> Swift.Void)?)
  func sendEvent(_ eventName: Swift.String, _ data: [Swift.String : Any?], _ completion: ((ExtoleMobileSDK.Id<ExtoleMobileSDK.Event>?, (any Swift.Error)?) -> Swift.Void)?, _ jwt: Swift.String?)
  func identify(_ email: Swift.String, _ data: [Swift.String : Any?], _ completion: ((ExtoleMobileSDK.Id<ExtoleMobileSDK.Event>?, (any Swift.Error)?) -> Swift.Void)?)
  func identifyJwt(_ jwt: Swift.String, _ data: [Swift.String : Any?], _ completion: ((ExtoleMobileSDK.Id<ExtoleMobileSDK.Event>?, (any Swift.Error)?) -> Swift.Void)?)
  func webView(headers: [Swift.String : Swift.String], data: [Swift.String : Swift.String]) -> any ExtoleMobileSDK.ExtoleWebView
  func getLogger() -> any ExtoleMobileSDK.ExtoleLogger
  func getView() -> ExtoleMobileSDK.ExtoleView
  func logout()
  func copy(programDomain: Swift.String?, applicationName: Swift.String?, email: Swift.String?, applicationData: [Swift.String : Swift.String]?, data: [Swift.String : Swift.String]?, labels: [Swift.String]?, sandbox: Swift.String?, debugEnabled: Swift.Bool?, logHandlers: [any Logging.LogHandler], listenToEvents: Swift.Bool, jwt: Swift.String?) -> any ExtoleMobileSDK.Extole
  var EXTOLE_SDK_TAG: Swift.String { get }
  var ACCESS_TOKEN_PREFERENCES_KEY: Swift.String { get }
  var PARTNER_SHARE_ID_PREFRENCES_KEY: Swift.String { get }
}
extension ExtoleMobileSDK.Extole {
  public func copy(programDomain: Swift.String? = nil, applicationName: Swift.String? = nil, email: Swift.String? = nil, applicationData: [Swift.String : Swift.String]? = nil, data: [Swift.String : Swift.String]? = nil, labels: [Swift.String]? = nil, sandbox: Swift.String? = nil, debugEnabled: Swift.Bool? = nil, logHandlers: [any Logging.LogHandler] = [], listenToEvents: Swift.Bool = true, jwt: Swift.String? = nil) -> any ExtoleMobileSDK.Extole
  public func webView(headers: [Swift.String : Swift.String] = [:], data: [Swift.String : Swift.String] = [:]) -> any ExtoleMobileSDK.ExtoleWebView
}
public protocol ExtoleLogger {
  func setLogLevel(level: ExtoleMobileSDK.LogLevel)
  func getLogLevel() -> ExtoleMobileSDK.LogLevel
  func debug(_ message: Swift.String, args: Any?...)
  func info(_ message: Swift.String, args: Any?...)
  func warn(_ message: Swift.String, args: Any?...)
  func error(_ message: Swift.String, args: Any?...)
  func error(_ exception: any Swift.Error, _ message: Swift.String, args: Any?...)
}
public enum LogLevel {
  case disable
  case debug
  case info
  case warn
  case error
  public static func == (a: ExtoleMobileSDK.LogLevel, b: ExtoleMobileSDK.LogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ExtoleServices {
  public func getZoneFetcher() -> ExtoleMobileSDK.ZoneFetcher
  public func getRewardService() -> any ExtoleMobileSDK.RewardService
  public func getShareService() -> any ExtoleMobileSDK.ShareService
  @objc deinit
}
public protocol ExtoleWebView {
  func getWebView() -> WebKit.WKWebView
  func load(_ zone: Swift.String)
}
@_hasMissingDesignatedInitializers public class Id<Element> {
  public func getValue() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Me {
  final public let email: Swift.String?
  final public let firstName: Swift.String?
  final public let lastName: Swift.String?
  final public let partnerUserId: Swift.String?
  final public let profilePictureUrl: Swift.String?
  @objc deinit
}
public protocol RewardService {
  func pollReward(pollingId: Swift.String, timeoutSeconds: Swift.Int, retries: Swift.Int, completion: @escaping (ExtoleConsumerAPI.PollingRewardResponse?, (any Swift.Error)?) -> Swift.Void)
}
extension ExtoleMobileSDK.RewardService {
  public func pollReward(pollingId: Swift.String, timeoutSeconds: Swift.Int = 5, retries: Swift.Int = 5, completion: @escaping (ExtoleConsumerAPI.PollingRewardResponse?, (any Swift.Error)?) -> Swift.Void)
}
public protocol ShareService {
  func emailShare(_ recipient: Swift.String, _ subject: Swift.String, _ message: Swift.String, _ data: [Swift.String : Any?], _ completion: @escaping (ExtoleMobileSDK.Id<ExtoleMobileSDK.Event>?, (any Swift.Error)?) -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class Zone {
  final public let content: [Swift.String : ExtoleConsumerAPI.Entry?]?
  final public let zoneName: Swift.String
  final public let campaignId: ExtoleMobileSDK.Id<any ExtoleMobileSDK.Campaign>
  public func getName() -> Swift.String
  public func tap()
  public func viewed()
  public func get(_ dottedPath: Swift.String) -> Any?
  @objc deinit
}
public class ExtoleImpl : ExtoleMobileSDK.Extole {
  public var PARTNER_SHARE_ID_PREFRENCES_KEY: Swift.String
  public var ACCESS_TOKEN_PREFERENCES_KEY: Swift.String
  public var EXTOLE_SDK_TAG: Swift.String
  public var operations: [ExtoleMobileSDK.ExtoleOperation]
  public var zones: ExtoleMobileSDK.Zones
  public init(programDomain: Swift.String, applicationName: Swift.String, personIdentifier: Swift.String? = nil, applicationData: [Swift.String : Swift.String] = [:], data: [Swift.String : Swift.String] = [:], labels: [Swift.String] = [], sandbox: Swift.String = "production-production", logHandlers: [any Logging.LogHandler] = [], listenToEvents: Swift.Bool = true, disabledActions: [ExtoleMobileSDK.ActionType] = [], jwt: Swift.String? = nil)
  public func fetchZone(_ zoneName: Swift.String, _ data: [Swift.String : Swift.String], completion: @escaping (ExtoleMobileSDK.Zone?, (any ExtoleMobileSDK.Campaign)?, (any Swift.Error)?) -> Swift.Void)
  public func getServices() -> ExtoleMobileSDK.ExtoleServices
  public func sendEvent(_ eventName: Swift.String, _ data: [Swift.String : Any?], _ completion: ((ExtoleMobileSDK.Id<ExtoleMobileSDK.Event>?, (any Swift.Error)?) -> Swift.Void)?, _ jwt: Swift.String? = nil)
  public func sendEvent(_ eventName: Swift.String, _ data: [Swift.String : Any?], _ completion: ((ExtoleMobileSDK.Id<ExtoleMobileSDK.Event>?, (any Swift.Error)?) -> Swift.Void)?)
  public func getView() -> ExtoleMobileSDK.ExtoleView
  public func copy(programDomain: Swift.String? = nil, applicationName: Swift.String? = nil, email: Swift.String? = nil, applicationData: [Swift.String : Swift.String]? = nil, data: [Swift.String : Swift.String]? = nil, labels: [Swift.String]? = nil, sandbox: Swift.String? = nil, logHandlers: [any Logging.LogHandler] = [], listenToEvents: Swift.Bool = true, jwt: Swift.String? = nil) -> any ExtoleMobileSDK.Extole
  public func webView(headers: [Swift.String : Swift.String] = [:], data: [Swift.String : Swift.String] = [:]) -> any ExtoleMobileSDK.ExtoleWebView
  public func getLogger() -> any ExtoleMobileSDK.ExtoleLogger
  public func getHeaders() -> [Swift.String : Swift.String]
  public func identify(_ identifier: Swift.String, _ data: [Swift.String : Any?] = [:], _ completion: ((ExtoleMobileSDK.Id<ExtoleMobileSDK.Event>?, (any Swift.Error)?) -> Swift.Void)?)
  public func identifyJwt(_ jwt: Swift.String, _ data: [Swift.String : Any?] = [:], _ completion: ((ExtoleMobileSDK.Id<ExtoleMobileSDK.Event>?, (any Swift.Error)?) -> Swift.Void)?)
  public func logout()
  public func getDisabledActions() -> [ExtoleMobileSDK.ActionType]
  public func getJsonConfiguration() -> Swift.String?
  public func getAccessToken() -> Swift.String?
  @objc deinit
}
public struct UIExtoleWebView : SwiftUI.UIViewRepresentable {
  public init(_ extoleWebView: any ExtoleMobileSDK.ExtoleWebView, _ zoneName: Swift.String)
  public init(_ programDomain: Swift.String, _ zoneName: Swift.String, _ queryParameters: inout [Swift.String : Swift.String], _ headers: inout [Swift.String : Swift.String])
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: ExtoleMobileSDK.UIExtoleWebView.Context) -> WebKit.WKWebView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ webView: WebKit.WKWebView, context: ExtoleMobileSDK.UIExtoleWebView.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = WebKit.WKWebView
}
@_hasMissingDesignatedInitializers public class ZoneFetcher {
  public func getZones(zonesName: [Swift.String], data: [Swift.String : Any?], programLabels: [Swift.String], customHeaders: [Swift.String : Swift.String], completion: @escaping ([ExtoleMobileSDK.ZoneResponseKey : ExtoleMobileSDK.Zone?]) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ZoneResponseKey : Swift.Hashable, Swift.Comparable {
  final public let zoneName: Swift.String
  public static func == (leftHandSide: ExtoleMobileSDK.ZoneResponseKey, rightHandSite: ExtoleMobileSDK.ZoneResponseKey) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func < (lhs: ExtoleMobileSDK.ZoneResponseKey, rhs: ExtoleMobileSDK.ZoneResponseKey) -> Swift.Bool
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Zones {
  public var zonesResponse: [Swift.String : ExtoleMobileSDK.Zone?]
  @objc deinit
}
public class AppEvent : Swift.CustomStringConvertible {
  final public let eventName: Swift.String
  final public let eventData: [Swift.String : Any?]
  public init(_ eventName: Swift.String, _ eventData: [Swift.String : Any?] = [:])
  public var description: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ExtoleOperation : ObjectMapper.Mappable {
  public func executeActions(event: ExtoleMobileSDK.AppEvent, extole: ExtoleMobileSDK.ExtoleImpl)
  public func passingConditions(event: ExtoleMobileSDK.AppEvent, extole: ExtoleMobileSDK.ExtoleImpl) -> [ExtoleMobileSDK.Condition]
  public func actionsToExecute(event: ExtoleMobileSDK.AppEvent, extole: ExtoleMobileSDK.ExtoleImpl) -> [ExtoleMobileSDK.Action]
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FetchAction : ExtoleMobileSDK.Action, Swift.CustomStringConvertible {
  public static var type: ExtoleMobileSDK.ActionType
  override public func execute(event: ExtoleMobileSDK.AppEvent, extole: ExtoleMobileSDK.ExtoleImpl)
  public func getZones() -> [Swift.String]?
  public func getData() -> [Swift.String : Swift.String]?
  override public func getType() -> ExtoleMobileSDK.ActionType
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  public var description: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LoadOperationsAction : ExtoleMobileSDK.Action, Swift.Hashable, Swift.Equatable, Swift.CustomStringConvertible {
  public static var type: ExtoleMobileSDK.ActionType
  override public func execute(event: ExtoleMobileSDK.AppEvent, extole: ExtoleMobileSDK.ExtoleImpl)
  public func getZones() -> [Swift.String]?
  public func getData() -> [Swift.String : Swift.String]?
  override public func getType() -> ExtoleMobileSDK.ActionType
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  public static func == (lhs: ExtoleMobileSDK.LoadOperationsAction, rhs: ExtoleMobileSDK.LoadOperationsAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var description: Swift.String {
    get
  }
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NativeShareAction : ExtoleMobileSDK.Action, Swift.CustomStringConvertible {
  public static var type: ExtoleMobileSDK.ActionType
  override public func execute(event: ExtoleMobileSDK.AppEvent, extole: ExtoleMobileSDK.ExtoleImpl)
  override public func getType() -> ExtoleMobileSDK.ActionType
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  public var description: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NoOpAction : ExtoleMobileSDK.Action {
  public static var type: ExtoleMobileSDK.ActionType
  override public func execute(event: ExtoleMobileSDK.AppEvent, extole: ExtoleMobileSDK.ExtoleImpl)
  override public func getType() -> ExtoleMobileSDK.ActionType
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PromptAction : ExtoleMobileSDK.Action, Swift.CustomStringConvertible {
  public static var type: ExtoleMobileSDK.ActionType
  override public func execute(event: ExtoleMobileSDK.AppEvent, extole: ExtoleMobileSDK.ExtoleImpl)
  public func getMessage() -> Swift.String?
  override public func getType() -> ExtoleMobileSDK.ActionType
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  public var description: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SetLogLevelAction : ExtoleMobileSDK.Action, Swift.CustomStringConvertible {
  public static var type: ExtoleMobileSDK.ActionType
  override public func execute(event: ExtoleMobileSDK.AppEvent, extole: ExtoleMobileSDK.ExtoleImpl)
  public func getLogLevel() -> Swift.String?
  override public func getType() -> ExtoleMobileSDK.ActionType
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  public var description: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ViewFullScreenAction : ExtoleMobileSDK.Action, Swift.CustomStringConvertible {
  public static var type: ExtoleMobileSDK.ActionType
  override public func execute(event: ExtoleMobileSDK.AppEvent, extole: ExtoleMobileSDK.ExtoleImpl)
  public func getZoneName() -> Swift.String?
  override public func getType() -> ExtoleMobileSDK.ActionType
  required public init?(map: ObjectMapper.Map)
  override public func mapping(map: ObjectMapper.Map)
  public var description: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ExtoleObservableUi : Foundation.ObservableObject {
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor(unsafe) public struct ExtoleView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s15ExtoleMobileSDK0A4ViewV4bodyQrvp", 0) __
}
extension ExtoleMobileSDK.ActionType : Swift.Equatable {}
extension ExtoleMobileSDK.ActionType : Swift.Hashable {}
extension ExtoleMobileSDK.ActionType : Swift.RawRepresentable {}
extension ExtoleMobileSDK.ConditionType : Swift.Equatable {}
extension ExtoleMobileSDK.ConditionType : Swift.Hashable {}
extension ExtoleMobileSDK.ConditionType : Swift.RawRepresentable {}
extension ExtoleMobileSDK.LogLevel : Swift.Equatable {}
extension ExtoleMobileSDK.LogLevel : Swift.Hashable {}
